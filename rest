const express = require("express");
const mongoose = require("mongoose");

const app = express();
const port = 6000;

const employeeSchema = new mongoose.Schema({
    firstname: String,
    lastname: String
});
const Employee = mongoose.model("employee", employeeSchema);

const url = 'mongodb+srv://shubhampund9767:9325@cluster1.gme60xq.mongodb.net/?retryWrites=true&w=majority&appName=Cluster1/Restapi';

mongoose.connect(url)
    .then(() => console.log("Connected to MongoDB"))
    .catch((error) => console.error("Error connecting to MongoDB:", error));

app.use(express.json());

app.get("/employees", async (req, res) => {
    try {
        const employees = await Employee.find();
        res.json(employees);
    } catch (err) {
        res.status(500).json({ message: err.message });
    }
});

app.post("/employees", async (req, res) => {
    const employee = new Employee({
        firstname: req.body.firstname,
        lastname: req.body.lastname
    });

    try {
        const newEmployee = await employee.save();
        res.status(201).json(newEmployee);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

app.put('/employees/:id', async (req, res) => {
    const _id = req.params.id;
    const updatedData = req.body;

    try {
        const updatedEmployee = await Employee.findByIdAndUpdate(_id, updatedData, { new: true });
        // if (!updatedEmployee) {
        //     return res.status(404).json({ message: "Employee not found" });
        // }
        res.json(updatedEmployee);
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

app.delete('/employees/:id', async (req, res) => {
    const _id = req.params.id;

    try {
        const deletedEmployee = await Employee.findByIdAndDelete(_id);
        res.json({ message: "Employee deleted successfully" });
    } catch (err) {
        res.status(400).json({ message: err.message });
    }
});

app.listen(port, () => {
    console.log(`Server started on port ${port}`);
});
